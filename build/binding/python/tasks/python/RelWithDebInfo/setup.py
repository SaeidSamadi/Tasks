#
# This file was generated by jrl-cmakemodules, do not modify
#

try:
    from setuptools import setup
    from setuptools import Extension
except ImportError:
    from distutils.core import setup
    from distutils.extension import Extension

from Cython.Build import cythonize

import hashlib
import os
import re

try:
    from numpy import get_include as numpy_get_include
except ImportError:
    def numpy_get_include():
        return ""

win32_build = os.name == 'nt'

sha512 = hashlib.sha512()
src_files = filter(len, 'tasks/c_tasks.pxd;tasks/tasks.pxd;tasks/__init__.py;tasks/qp/c_qp.pxd;tasks/qp/qp.pxd;tasks/qp/__init__.py;tasks/tasks.pyx;tasks/qp/c_qp_private.pxd;tasks/qp/qp.pyx;include/qp_wrapper.hpp;tests/arms.py;tests/TestQPMultiRobot.py;tests/utils.py;'.split(';'))
def absolute(src):
    if os.path.isabs(src):
        return src
    else:
        return '{}/{}'.format('/home/sasa/Softwares/Tasks/binding/python', src)
src_files = map(absolute, src_files)
for f in src_files:
    chunk = 2**12
    with open(f, 'r') as fd:
        while True:
            data = fd.read(chunk)
            if data:
                sha512.update(data.encode('ascii'))
            else:
                break
version_hash = sha512.hexdigest()[:7]

class pkg_config(object):
    def __init__(self):
        compile_args = "LSSOL_SOLVER_FOUND;"
        self.compile_args = [ "-D" + x for x in compile_args.split(';') if len(x) ]
        self.compile_args = list(set(self.compile_args))
        include_dirs = "/home/sasa/Softwares/Tasks/build;/home/sasa/Softwares/Tasks/build/include;/home/sasa/Softwares/Tasks/include;/home/sasa/Softwares/Tasks/src;/home/sasa/Softwares/Tasks/build/src/../include;;/usr/local/include;/usr/local/include;/usr/local/include/eigen3;/usr/local/include;/usr/include;/usr/local/include;/usr/include;/usr/local/include;/home/sasa/Softwares/Tasks/src;/home/sasa/Softwares/Tasks/build/src/../include;;/usr/local/include;/usr/local/include;/usr/local/include/eigen3;/usr/local/include;/usr/include;/usr/local/include;/usr/include;/usr/local/include"
        self.include_dirs = [ x for x in include_dirs.split(';') if len(x) ]
        self.include_dirs.append('/home/sasa/Softwares/Tasks/binding/python/include')
        self.include_dirs = list(set(self.include_dirs))
        library_dirs = ""
        self.library_dirs = [ x for x in library_dirs.split(';') if len(x) ]
        self.libraries = [ re.sub("^lib", "", os.path.splitext(os.path.basename(l))[0]) for l in "/home/sasa/Softwares/Tasks/build/src/libTasks.so".split(";") if len(l) ]
        self.libraries = list(set(self.libraries))
        self.library_dirs += [os.path.dirname(l) for l in "/home/sasa/Softwares/Tasks/build/src/libTasks.so".split(';') if len(l) ]
        self.library_dirs = list(set(self.library_dirs))
        self.link_args = []

config = pkg_config()

def cxx_standard(value):
    try:
        return int(value)
    except:
        return 0
def cxx_standard_cmp(lhs):
    if lhs == 98:
        return 1
    return lhs
cxx_standard = max(map(cxx_standard, "0;11".split(';')), key = cxx_standard_cmp)
if cxx_standard != 0:
    config.compile_args.append('-std=c++{}'.format(cxx_standard))

if win32_build:
    config.compile_args.append("-DWIN32")
    if "RelWithDebInfo".lower() == "debug":
        config.compile_args += ["-Zi", "/Od"]
        config.link_args += ["-debug"]

def GenExtension(name):
    pyx_src = name.replace('.', '/')
    pyx_src = pyx_src + '.pyx'
    ext_src = pyx_src
    return Extension(name, [ext_src], extra_compile_args = config.compile_args, include_dirs = config.include_dirs + [numpy_get_include()], library_dirs = config.library_dirs, libraries = config.libraries, extra_link_args = config.link_args)

extensions = [ GenExtension(x) for x in 'tasks.tasks;tasks.qp.qp'.split(';') ]

extensions = cythonize(extensions)

packages = [ p.split('.')[0] for p in 'tasks.tasks;tasks.qp.qp'.split(';') ]
package_data = { p : list(map(lambda x: x.replace(p + '/', ''), filter(lambda x: x.startswith(p + '/'), 'tasks/c_tasks.pxd;tasks/tasks.pxd;tasks/__init__.py;tasks/qp/c_qp.pxd;tasks/qp/qp.pxd;tasks/qp/__init__.py'.split(';')))) for p in packages }

setup(
  name = 'tasks',
  version='1.2.0-{}'.format(version_hash),
  ext_modules = extensions,
  packages = packages,
  package_data = package_data
)
